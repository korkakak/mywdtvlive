--- ./include/asm-mips/tango3/ir.h.org	2010-05-26 09:00:46.000000000 +0800
+++ ./include/asm-mips/tango3/ir.h	2010-05-26 09:22:47.000000000 +0800
@@ -30,6 +30,7 @@
 #define IR_IOCGETWAITPERIOD	_IO(IR_IOC_MAGIC, 3)
 #define IR_IOCSETHOLDKEYS       _IO(IR_IOC_MAGIC, 4)
 #define IR_IOCGETHOLDKEYS       _IO(IR_IOC_MAGIC, 5)
+#define	IR_IOCSETRELEASEKEY	_IO(IR_IOC_MAGIC, 6)
 #endif /* __KERNEL__ || !BOOTLOADER */
                                                                                 
 #endif /* _IR_H_ */
--- drivers/char/irkernel.c.org	2010-05-28 05:48:55.000000000 +0800
+++ drivers/char/irkernel.c	2010-05-28 05:49:23.000000000 +0800
@@ -1,3 +1,5 @@
+#define	CONFIG_IR_REPORT_RELEASE_KEY
+
 
 /*********************************************************************
  Copyright (C) 2001-2007
@@ -130,6 +132,11 @@
 	unsigned char b_mode;		/* Blocking mode or not */
 	unsigned long last_jiffies;	/* Timestamp for last reception */
 	unsigned int num_keys;		/* Number of keys in the table */
+#ifdef	CONFIG_IR_REPORT_RELEASE_KEY
+	struct	timer_list	release_timer;
+	unsigned int released_key_code;
+	int	released_key_sent;
+#endif	// CONFIG_IR_REPORT_RELEASE_KEY
 };
 
 /* Some prototypes */
@@ -397,7 +404,15 @@
 	if ((priv->b_mode != 0) && (priv->c_idx == pidx)) 
 		wake_up_interruptible(&ir_wq);
 
+#ifdef	CONFIG_IR_REPORT_RELEASE_KEY
+	priv->released_key_sent = 0;
+#endif	// CONFIG_IR_REPORT_RELEASE_KEY
+
 out:
+#ifdef	CONFIG_IR_REPORT_RELEASE_KEY
+	if (priv->released_key_code && !priv->released_key_sent)
+		mod_timer( &priv->release_timer, jiffies + 15 );
+#endif	// CONFIG_IR_REPORT_RELEASE_KEY
 	spin_unlock(&priv->lock);
 }
 
@@ -525,6 +540,12 @@
 	spin_lock_irqsave(&priv->lock, flags);
 
 	switch(cmd) {
+#ifdef	CONFIG_IR_REPORT_RELEASE_KEY
+		case IR_IOCSETRELEASEKEY:
+			priv->released_key_code = arg; 
+			//printk( KERN_ERR "Repeat key code: %x\n", priv->released_key_code );
+			break;
+#endif	// CONFIG_IR_REPORT_RELEASE_KEY
 		case IR_IOCSETREPEATKEYS: /* Set the repetition keys */
 			if (copy_from_user(&key_no, ptr, sizeof(unsigned long))) 
 				goto efault_out;
@@ -707,6 +728,25 @@
 	return(0);
 }
 
+#ifdef	CONFIG_IR_REPORT_RELEASE_KEY
+static	void	send_release_key_func( unsigned long arg )
+{
+	spin_lock(ir_priv.lock);
+	//printk( KERN_ERR "released\n" );
+	
+	if (((ir_priv.p_idx + 1) % buffer_size) == ir_priv.c_idx) {
+		ir_priv.c_idx = (ir_priv.c_idx + 1) % buffer_size;
+	}
+	ir_priv.buffer[ir_priv.p_idx] = ir_priv.released_key_code;
+	ir_priv.p_idx = (ir_priv.p_idx + 1) % buffer_size ;
+
+	wake_up_interruptible(&ir_wq);
+
+	ir_priv.released_key_sent = 1;
+	spin_unlock(ir_priv.lock);
+}	
+#endif	// CONFIG_IR_REPORT_RELEASE_KEY
+
 int __init ir_init_module(void)
 {
 	int status = 0;
@@ -719,6 +759,10 @@
 
 	/* Initialize private data structure */
 	memset(&ir_priv, 0, sizeof(struct ir_private)); 
+#ifdef	CONFIG_IR_REPORT_RELEASE_KEY
+	init_timer( &ir_priv.release_timer );
+	ir_priv.release_timer.function = send_release_key_func; 
+#endif	// CONFIG_IR_REPORT_RELEASE_KEY
 	spin_lock_init(&ir_priv.lock);
 
 #ifdef WITH_RC6_CONTROL
