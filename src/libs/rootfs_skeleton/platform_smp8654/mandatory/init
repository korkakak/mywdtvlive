#!/bin/sh

. ./sysconfig 

echo "===================ROOTFS==================================="
cat ./sysconfig
echo "============================================================"

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
/bin/mount -t proc none /proc
echo "1 1 1 7" > /proc/sys/kernel/printk
mount -t sysfs sysfs /sys
mount -t usbfs usb /proc/bus/usb
echo /sbin/mdev > /proc/sys/kernel/hotplug
mount -t tmpfs mdev /dev
mkdir /dev/pts
mount -t devpts devpts /dev/pts
mdev -s
mount -t tmpfs none /tmp
/bin/hostname -F /etc/hostname

if [ x$SYSCONF_ROOTFS2 != "x" ] && [ x$1 != "xupgrade" ]; then

	mount -t squashfs $SYSCONF_ROOTFS2_DEVICE  $SYSCONF_ROOTFS2_PATH ;
	RET=$? ;

	if [ $RET != 0 ]; then
		mount -t cramfs $SYSCONF_ROOTFS2_DEVICE  $SYSCONF_ROOTFS2_PATH ;
		RET=$? ;
	fi

	if [ $RET == 0 ]; then
		# Put rootfs2 in front of original PATH so that we can use new binary to overwrite old 
		# Same rule also apply to do_cmd_xx
		export PATH=$SYSCONF_ROOTFS2_PATH/sbin:$SYSCONF_ROOTFS2_PATH/bin:$PATH
		# Put original LD_LIBRARY_PATH in front of new so that we won't crash dmaosd due to wrong lib
		export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SYSCONF_ROOTFS2_PATH/lib:$SYSCONF_ROOTFS2_PATH/usr/lib
		if [ -f $SYSCONF_ROOTFS2_PATH/init ]; then
			echo "Run the init script in root2 path : $SYSCONF_ROOTFS2_PATH/init" ;
			$SYSCONF_ROOTFS2_PATH/init ;
		fi
	fi
fi

if [ -f /bin/console_sniffer ]; then
	/bin/console_sniffer &
fi
if [ -f bin/console_upload.sh ]; then
	bin/console_upload.sh &
fi

mkdir -p /dev/net
mknod /dev/net/tun c 10 200


mkdir -p /dev/input
MINOR=0
while [ $MINOR -lt 17 ]; do
	mknod /dev/input/event$MINOR c 13 `expr $MINOR + 64`;
	MINOR=`expr $MINOR + 1`;
done

ln -s $SYSCONF_BOOTLOADER_MTD_PARTITION /dev/mtdblock_bootloader
ln -s $SYSCONF_KERNEL_MTD_PARTITION /dev/mtdblock_kernel
ln -s $SYSCONF_FIRMWARE_MTD_PARTITION /dev/mtdblock_romfs

cp /etc/securetty.ori /tmp
/sbin/ldconfig -C /tmp/ld.so.cache
if [ x$1 == "xupgrade" ]; then
	/sbin/config_tool -l 
	touch /tmp/STOP_DMARENDER
	touch /tmp/STOP_PICRENDER
else
	/sbin/config_tool -l -m 10 &
fi

if [ x$1 != "xf1f1" ]; then
	if [ x$SYSCONF_LAST_PARTITION_NODE_NAME != "x" ]; then
		dd if=$SYSCONF_LAST_PARTITION_NODE_NAME of=/tmp/lastblock bs=1024
		mkdir $SYSCONF_STATIC_CONFIG_MOUNT_POINT
		mount -t minix -o loop /tmp/lastblock $SYSCONF_STATIC_CONFIG_MOUNT_POINT
	fi
fi


export EM8XXX_SERVER=":0"
if [ -d /usr/orion ] ; then
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/orion/communicationmanager/lib
	export ORION_DYNAMIC_CONFIG=/tmp/WDTVPriv/.orion
fi

mknod /dev/mum0 c 126 0
mknod /dev/em8xxx0 c 127 0
mknod /dev/mtdblock3 b 254 6
mknod /dev/mtdblock2 b 254 3
mknod /dev/mtdblock0 b 254 0
mknod /dev/sda1 b 8 1

/bin/fw_reload_t3.sh

if [ x$1 != "xsisi" ]; then
	if [ -f /bin/init_1 ]; then
		/bin/init_1
	fi
	if [ -f /bin/init_2 ]; then
		/bin/init_2
	fi
	if [ -f /bin/init_3 ]; then
		/bin/init_3
	fi
fi
ln -s /dev/ir /dev/irda

echo "/sbin/modprobe -q" > /proc/sys/kernel/modprobe

modprobe fuse 
modprobe r8169

MAJOR=254
while [ -f /lib/modules/irkernel.ko ]; do
	insmod /lib/modules/irkernel.ko major_num=$MAJOR;
	if [ $? == 0 ]; then
		mknod /dev/ir c $MAJOR 0
		break;
	fi
	MAJOR=`expr $MAJOR - 1`
	if [ $MAJOR == 1 ]; then
		break;
	fi
done

MAJOR=254
while [ -f /lib/modules/wd_led_rst.ko ]; do
	insmod /lib/modules/wd_led_rst.ko major_num=$MAJOR;
	if [ $? == 0 ]; then
		mknod /dev/led_rst c $MAJOR 0
		break;
	fi
	MAJOR=`expr $MAJOR - 1`
	if [ $MAJOR == 1 ]; then
		break;
	fi
done

if [ -f /lib/modules/proc_pipe.ko ]; then
	insmod /lib/modules/proc_pipe.ko
fi

MAJOR=254
while [ -f /lib/modules/lmp555_gpio.ko ]; do
	insmod /lib/modules/lmp555_gpio.ko major_num=$MAJOR;
	if [ $? == 0 ]; then
		mknod /dev/led_rst c $MAJOR 0;
		break;
	fi
	MAJOR=`expr $MAJOR - 1`
	if [ $MAJOR == 1 ]; then
		break;
	fi
done

if [ -f /lib/modules/ufsd.ko ]; then
	insmod /lib/modules/ufsd.ko
fi

if [ -f /lib/modules/tntfs.ko ]; then
	insmod /lib/modules/tntfs.ko
fi

if [ -f /lib/modules/fctrl.ko ]; then
	insmod /lib/modules/fctrl.ko
fi

if [ -f /ir_table ]; then
	cat /ir_table > /proc/tangoxfreq/ir_table 
fi

if [ -f /lib/modules/i2c_hal.ko ]; then
	insmod /lib/modules/i2c_hal.ko
fi

if [ -f /lib/modules/thermal_g751.ko ]; then
	insmod /lib/modules/thermal_g751.ko
fi

MAJOR=254
while [ -f /lib/modules/wdtv_rv_microp.ko ]; do
	insmod /lib/modules/wdtv_rv_microp.ko major_num=$MAJOR;
	if [ $? == 0 ]; then
		if [ -f /bin/temp_ctrl.sh ]; then
			cp /bin/temp_ctrl.sh /tmp;
			chmod 755 /tmp/temp_ctrl.sh;
			while [ 1 ]; do sleep 300; /tmp/temp_ctrl.sh; done &
		fi
		mknod /dev/led_rst c $MAJOR 0
		sleep 1;
		#set RTC time to linux.
		/usr/sbin/rtc -R
		break;
	fi
	MAJOR=`expr $MAJOR - 1`
	if [ $MAJOR == 1 ]; then
		break;
	fi
done

MAJOR=254
while [ -f /lib/modules/lacie_ariane_microp.ko ]; do
	insmod /lib/modules/lacie_ariane_microp.ko major_num=$MAJOR;
	if [ $? == 0 ]; then
		if [ -f /bin/temp_ctrl.sh ]; then
			cp /bin/temp_ctrl.sh /tmp;
			chmod 755 /tmp/temp_ctrl.sh;
			while [ 1 ]; do sleep 300; /tmp/temp_ctrl.sh; done &
		fi
		mknod /dev/led_rst c $MAJOR 0
		sleep 1;
		#set RTC time to linux.
		/usr/sbin/rtc -R
		break;
	fi
	MAJOR=`expr $MAJOR - 1`
	if [ $MAJOR == 1 ]; then
		break;
	fi
done

modprobe cifs CIFSMaxBufSize=64512


mkdir -p /tmp/media
mkdir -p /tmp/media/usb
mkdir -p /tmp/media/samba

ifconfig lo 127.0.0.1

if [ -f /etc/directfbrc ]; then
cp /etc/directfbrc /tmp/directfbrc
fi
if [ -f /etc/sigmadfbrc ]; then
cp /etc/sigmadfbrc /tmp/sigmadfbrc
fi
if [ -f /usr/sbin/directfbrc_builder ]; then
/usr/sbin/directfbrc_builder
fi
if [ -d /etc/stagecraft-data ]; then
mkdir -p /tmp/stagecraft-data/shared-objects
fi

cp /etc/passwd.conf /tmp -f
cp /etc/shadow.conf /tmp -f

if [ x$1 == "xf1f1" ]; then
	echo "enter f1 test ..."
	/bin/sh
fi

if [ x$1 == "xsisi" ]; then
	echo "enter si test ..."
	touch /tmp/sisi_mode
	mount /dev/sda1 /tmp/media/usb
	if [ $? != 0 ]; then
		echo "Mounting /dev/sda1 fail, try to mount /dev/sda to /tmp/media/usb"
		mount /dev/sda /tmp/media/usb
		if [ $? != 0 ]; then
			echo "Mounting /dev/sda still fail, abort!!!"
		fi
	fi
	if [ ! -f /tmp/media/usb/runsit.sh ]; then
		echo "/tmp/media/usb/runsit.sh is not exist..."
		umount /tmp/media/usb
		mount /dev/sdb1 /tmp/media/usb
		if [ $? != 0 ]; then
			echo "Mounting /dev/sdb1 fail, try to mount /dev/sdb to /tmp/media/usb"
			mount /dev/sdb /tmp/media/usb
			if [ $? != 0 ]; then
				echo "Mounting /dev/sdb still fail, abort!!!"
			fi
		fi
	fi
	/tmp/media/usb/runsit.sh
	/bin/sh
fi

#/bin/memory_cache_server &

if [ -f /usr/local/sshd/sbin/sshd ]; then
	mkdir -p /tmp/empty ; 
	/usr/local/sshd/sbin/sshd;
fi

if [ -f $SYSCONF_STATIC_CONFIG_MOUNT_POINT/config ]; then
	. $SYSCONF_STATIC_CONFIG_MOUNT_POINT/config
	if [ x${CONF_EXT} = xy ]; then
		touch /tmp/sata_ext;
	fi
	if [ x${CONF_XFS} = xy ]; then
		touch /tmp/sata_xfs;
	fi
	if [ x${CONF_MO} = xy ]; then
		touch /tmp/conf_mo;
	fi
fi

#
# Try to enable swap using internal SATA
#
LIST=`cd /sys/block; ls -d sd*`
FOUND=0;
for DEV in $LIST; do
	ls -ld /sys/block/${DEV}/device | grep -q SATA;
	if [ $? == 0 ]; then
		FOUND=1;
		break;
	fi
done
if [ $FOUND == 1 ]; then
	SWAPDEV=`fdisk -l /dev/${DEV} | grep swap`;
	for X in $SWAPDEV; do
		swapon ${X};
		break;
	done
fi

run_all $1 $2 $3 $4 $5 &

/bin/run_twonky_server &

if [ -f /bin/alphabox ]; then
	/bin/alphabox &
fi

if [ -d /webserver ]; then
	/bin/webgui_db_checker
	if [ ! -f /tmp/conf/database.db ]; then 
		cp /conf_src/database.db /tmp/conf/ ; 
	fi
	mount -t tmpfs tmpfs /webserver/logs
fi

while [ 1 ]; do 
		/bin/sh ;
done

